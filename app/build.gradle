apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'

android {
    compileSdkVersion 26
    buildToolsVersion '28.0.3'
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId "com.example.administrator.newsdf"
        minSdkVersion 15
        //noinspection OldTargetApi
        targetSdkVersion 26
        versionCode 1
        versionName "3.6.2"
        resConfigs "zh-rCN"
        multiDexEnabled true
        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a', 'x86', 'x86_64', 'arm64-v8a'
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                //极光推送
                JPUSH_APPKEY : "f050fc1f161dd2f848ac1f58",
                JPUSH_CHANNEL: "developer-default",
        ]

    }
    packagingOptions {//打包时的相关配置
        //pickFirsts做用是 当有重复文件时 打包会报错 这样配置会使用第一个匹配的文件打包进入apk
        // 表示当apk中有重复的META-INF目录下有重复的LICENSE文件时  只用第一个 这样打包就不会报错
        pickFirsts = ['META-INF/LICENSE']
        //merges何必 当出现重复文件时 合并重复的文件 然后打包入apk
        //这个是有默认值得 merges = [] 这样会把默默认值去掉  所以我们用下面这种方式 在默认值后添加
        merge 'META-INF/LICENSE'
        //这个是在同时使用butterknife、dagger2做的一个处理。同理，遇到类似的问题，只要根据gradle的提示，做类似处理即可。
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    //greendao配置
    greendao {
        //版本号，升级时可配置
        schemaVersion 1
    }
    //添加如下配置就ok了
    lintOptions {
        checkReleaseBuilds false
        abortOnError false

    }
    buildTypes {
        debug {
            //显示日志
            buildConfigField("boolean", "LOG_DEBUG", "true");
            debuggable true
            shrinkResources false
            zipAlignEnabled true
            minifyEnabled false

        }
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
//            buildConfigField("String", "URL_PERFIX", "\"http://120.79.142.15/pzgc/\"")// 配置URL前缀
            //Zipalign优化
            zipAlignEnabled false
            minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            //      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'//默认不优化
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //optimize 默认优化就是这两个文件的区别
            lintOptions {
                checkReleaseBuilds false
                // Or, if you prefer, you can continue to check for errors in release builds,
                // but continue the build even when errors are found:
                abortOnError false
            }
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.name.equalsIgnoreCase('release')) {
                outputFileName = "品质工程正式版.apk"
            } else {
                outputFileName = "品质工程测试版.apk"
            }
        }
    }

}

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    api files('libs/BaiduLBS_Android.jar')
    //饼图
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    def nav_version = '1.0.0-alpha01'
    def lifecycle = '1.1.1'
    //navigation
    //noinspection GradleDependency
    implementation "android.arch.navigation:navigation-fragment:$nav_version"
    //noinspection GradleDependency
    implementation "android.arch.navigation:navigation-ui:$nav_version"
    // alternatively, just LiveData
    implementation "android.arch.lifecycle:livedata:$lifecycle"
    implementation "android.arch.lifecycle:extensions:$lifecycle"
    implementation project(':baselibrary')
    implementation project(':timepickter')
    api 'com.tencent.tbs.tbssdk:sdk:43903'

}
