apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
//微信混淆
apply plugin: 'AndResGuard'
android {
    compileSdkVersion 26
    buildToolsVersion '28.0.3'
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId "com.example.administrator.yanghu"
        minSdkVersion 15
        //noinspection OldTargetApi
        targetSdkVersion 26
        versionCode 1
        versionName "3.7.1"
        resConfigs "zh-rCN"
        multiDexEnabled true
        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a', 'x86', 'x86_64', 'arm64-v8a'
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                //极光推送
                JPUSH_APPKEY : "f050fc1f161dd2f848ac1f58",
                JPUSH_CHANNEL: "developer-default",
        ]
    }
    packagingOptions {//打包时的相关配置
        //pickFirsts做用是 当有重复文件时 打包会报错 这样配置会使用第一个匹配的文件打包进入apk
        // 表示当apk中有重复的META-INF目录下有重复的LICENSE文件时  只用第一个 这样打包就不会报错
        pickFirsts = ['META-INF/LICENSE']
        //merges何必 当出现重复文件时 合并重复的文件 然后打包入apk
        //这个是有默认值得 merges = [] 这样会把默默认值去掉  所以我们用下面这种方式 在默认值后添加
        merge 'META-INF/LICENSE'
        //这个是在同时使用butterknife、dagger2做的一个处理。同理，遇到类似的问题，只要根据gradle的提示，做类似处理即可。
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    //greendao配置
    greendao {
        //版本号，升级时可配置
        schemaVersion 1
    }
    //添加如下配置就ok了
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    signingConfigs {
        config {
            keyAlias 'key0'
            keyPassword 'JJXX@123'
            storeFile file('F:\\android\\品质工程(建养).keystore')
            // storeFile file('E:\\GitHub\\colligate\\meeting\\会议系统.keystore')
            storePassword 'JJXX@2018'
        }
    }
    buildTypes {
        debug {
            //显示日志
            buildConfigField("boolean", "LOG_DEBUG", "true");
            debuggable true
            shrinkResources false
            zipAlignEnabled true
            minifyEnabled false

        }
        release {
            // 不显示Log
            signingConfig signingConfigs.config
            buildConfigField "boolean", "LOG_DEBUG", "false"
//            buildConfigField("String", "URL_PERFIX", "\"http://120.79.142.15/pzgc/\"")// 配置URL前缀
            //Zipalign优化
            zipAlignEnabled false
            minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            //      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'//默认不优化
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //optimize 默认优化就是这两个文件的区别
            lintOptions {
                checkReleaseBuilds false
                // Or, if you prefer, you can continue to check for errors in release builds,
                // but continue the build even when errors are found:
                abortOnError false
            }
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.name.equalsIgnoreCase('release')) {
                outputFileName = "品质工程(建养).apk"
            } else {
                outputFileName = "品质工程(建养).apk"
            }
        }
    }

}

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    api files('libs/BaiduLBS_Android.jar')
    //饼图
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    def nav_version = '1.0.0-alpha01'
    def lifecycle = '1.1.1'
    //navigation
    //noinspection GradleDependency
    implementation "android.arch.navigation:navigation-fragment:$nav_version"
    //noinspection GradleDependency
    implementation "android.arch.navigation:navigation-ui:$nav_version"
    // alternatively, just LiveData
    implementation "android.arch.lifecycle:livedata:$lifecycle"
    implementation "android.arch.lifecycle:extensions:$lifecycle"
    implementation project(':baselibrary')
    implementation project(':timepickter')
    api 'com.gyf.immersionbar:immersionbar:3.0.0'


}
andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
    keepRoot = false
    // 设置这个值，会把arsc name列混淆成相同的名字，减少string常量池的大小
    fixedResName = "arg"
    // 打开这个开关会合并所有哈希值相同的资源，但请不要过度依赖这个功能去除去冗余资源
    mergeDuplicatedRes = true
    whiteList = [
            // for your icon
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for google-services
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.20'
        //path = "/usr/local/bin/7za"
    }

    /**
     * 可选： 如果不设置则会默认覆盖assemble输出的apk
     **/
    // finalApkBackupPath = "${project.rootDir}/final.apk"

    /**
     * 可选: 指定v1签名时生成jar文件的摘要算法
     * 默认值为“SHA-1”
     **/
    // digestalg = "SHA-256"
}